source 'https://cdn.cocoapods.org/'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'
platform :ios, '13.0'

# Use static frameworks (Flutter-friendly) instead of static libs/modular headers
use_frameworks! :linkage => :static

# --- Flutter boilerplate ---
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first" unless File.exist?(generated_xcode_build_settings_path)
  File.foreach(generated_xcode_build_settings_path) do |line|
    match = line.match(/FLUTTER_ROOT\=(.*)/)
    return match[1].strip if match
  end
  raise "FLUTTER_ROOT not found in Generated.xcconfig"
end

require File.expand_path(File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper'), __FILE__)
flutter_ios_podfile_setup

project 'Runner', { 'Debug' => :debug, 'Profile' => :release, 'Release' => :release }

target 'Runner' do
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |t|
    # Keep Flutter defaults
    flutter_additional_ios_build_settings(t)

    t.build_configurations.each do |config|
      s = config.build_settings

      # Enforce iOS 13.0 minimum
      min = '13.0'
      cur = s['IPHONEOS_DEPLOYMENT_TARGET'].to_s
      if cur.empty?
        s['IPHONEOS_DEPLOYMENT_TARGET'] = min
      else
        begin
          require 'rubygems'
          s['IPHONEOS_DEPLOYMENT_TARGET'] = min if Gem::Version.new(cur) < Gem::Version.new(min)
        rescue
          s['IPHONEOS_DEPLOYMENT_TARGET'] = min
        end
      end

      # Strip any invalid -G flags that slipped in from any pod
      %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS OTHER_LDFLAGS OTHER_SWIFT_FLAGS].each do |k|
        next unless s[k]
        vals = s[k].is_a?(Array) ? s[k].dup : s[k].to_s.split(/\s+/)
        vals.reject! { |v| v =~ /\A-G(\d+)?\z/ }
        vals.map!    { |v| v.gsub(/(^|\s)-G(\d+)?($|\s)/, ' ').strip }
        vals.reject!(&:empty?)
        s[k] = vals
      end

      # Be tolerant if any pod includes non-modular headers
      s['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
    end

    # Force module generation for gRPC family so modulemaps exist even with static frameworks
    if %w[gRPC-C++ gRPC-Core BoringSSL-GRPC abseil Libuv-gRPC openssl_grpc Protobuf protobuf].include?(t.name)
      t.build_configurations.each do |config|
        config.build_settings['DEFINES_MODULE'] = 'YES'
      end
    end
  end
end
