# CocoaPods analytics
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

platform :ios, '13.0'

# Locate Flutter and load its pod helper
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure `flutter pub get` is executed first"
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    match = line.match(/FLUTTER_ROOT\=(.*)/)
    return match[1].strip if match
  end
  raise "FLUTTER_ROOT not found in Generated.xcconfig"
end

require File.expand_path(File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper'), __FILE__)

flutter_ios_podfile_setup

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

target 'Runner' do
  # Do NOT manually add use_frameworks!/use_modular_headers! here; Flutter handles it per-plugin.
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # 1) Apply Flutterâ€™s additional settings to every pod target
  installer.pods_project.targets.each do |t|
    flutter_additional_ios_build_settings(t)

    # 2) Enforce iOS 13.0 min and scrub invalid flags
    t.build_configurations.each do |config|
      s = config.build_settings

      # Ensure minimum iOS deployment target
      current = s['IPHONEOS_DEPLOYMENT_TARGET'].to_s
      min = '13.0'
      if current.empty?
        s['IPHONEOS_DEPLOYMENT_TARGET'] = min
      else
        begin
          require 'rubygems'
          s['IPHONEOS_DEPLOYMENT_TARGET'] = min if Gem::Version.new(current) < Gem::Version.new(min)
        rescue
          s['IPHONEOS_DEPLOYMENT_TARGET'] = min
        end
      end

      # Strip any form of -G / -G0 / -G<number> from all relevant flags
      %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS OTHER_LDFLAGS OTHER_SWIFT_FLAGS].each do |k|
        next unless s[k]
        vals = s[k].is_a?(Array) ? s[k].dup : s[k].to_s.split(/\s+/)

        # remove tokens that are exactly -G or -G<digits>
        vals.reject! { |v| v =~ /\A-G(\d+)?\z/ }

        # and scrub embedded occurrences
        vals.map! { |v| v.gsub(/(^|\s)-G(\d+)?($|\s)/, ' ').strip }
        vals.reject!(&:empty?)

        s[k] = vals
      end
    end
  end
end
